package home_work_1;

//7.** Создать СТАТИЧЕСКИЙ метод String toBinaryString(byte number) и возвращает двоичное представление числа.
// В методе можно использовать только обычную математику которая описана в теории.
// Если число отрицательное то вернуть дополнительный код. Теория https://planetcalc.ru/747. Пример:
//        7.1 Вводим: 42.  Возвращает: 00101010
//        7.2 Вводим: 15.  Возвращает: 00001111
//        7.3 Вводим: -42. Возвращает: 11010110
//        7.4 Вводим: -15. Возвращает: 11110001

import java.util.Scanner;

public class TaskSeven {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        byte num;
        System.out.print("Введите число типа byte в диапазоне от -128 до 127 для перевода его в двоичный формат: ");
        num = sc.nextByte();

        System.out.println("Число " + num + " в двоичном представлении: " + toBinaryString(num));

    }

    public static String toBinaryString(byte number) {
        String binaryNumber = "";         // Я читал книгу Шилдта по Java, и там был такой пример, поэтому я уже знал как эту задачу решить :)
        int mask = 128;                   // 128 в двоичном представлении - 10000000 своего рода маска, которую мы будем накладывать на число
        for (;mask != 0; mask >>>= 1) {   // mask >>>= 1 - этой операцией мы будем постепенно смешать нашу единичку вправо и заполнять левые биты нулями
            if ((number & mask) != 0) {   // number & mask - тут мы используем побитовую операцию AND с помощью которой мы будем определять, записывать нам 1 или ноль
                binaryNumber += 1;        // на примере числа 42: 00101010 & | 00101010 & | 00101010 & |  и т.д
            } else {                      //                      10000000 = | 01000000 = | 00100000 = |
                binaryNumber += 0;        //                      00000000   | 00000000   | 00100000   |
            }
        }
        return binaryNumber;
    }
}
